import { parse } from '@babel/parser'; import type { Issue } from './index'
export function checkForLoopOffByOne(code:string):Issue[]{const ast=parse(code,{sourceType:'module',plugins:['jsx','typescript']});const issues:Issue[]=[];function tr(n:any){if(!n||typeof n!=='object')return;if(n.type==='ForStatement'){const t=n.test;if(t&&t.type==='BinaryExpression'&&t.operator==='<='){issues.push({rule:'for-loop-off-by-one',message:'Potential off-by-one: use "<" instead of "<=" when iterating to length.',severity:'info',fixHint:'Change "<=" to "<" for array length bounds.'})}}for(const k of Object.keys(n)){const c=(n as any)[k];if(Array.isArray(c))c.forEach(tr);else tr(c)}}tr(ast);return issues}
